name: 'Authorize AWS Access'
description: 'Authorize access to AWS security group for a specific IP address.'
inputs:
  aws-access-key-id:
    description: 'The AWS access key ID.'
    required: true
  aws-secret-access-key:
    description: 'The AWS secret access key.'
    required: true
  aws-region:
    description: 'The AWS region where the security group is located.'
    required: true
  security-group-id:
    description: 'The ID of the AWS security group.'
    required: true
  target-ip:
    description: 'Optional target ip to remove.'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Retrieve Runner IP
      id: runner-ip
      run: echo "::set-output name=ip_address::$(curl -s https://api.ipify.org)"
      shell: bash

    - name: AWS CLI with cache
      uses: Heliaa-PT-Digital-Asia/Heliaa-Actions/cache-aws-cli@main

    - name: Configure AWS CLI
      run: | 
          aws configure set aws_access_key_id ${{ inputs.aws-access-key-id }} 
          aws configure set aws_secret_access_key ${{ inputs.aws-secret-access-key }} 
          aws configure set region ${{ inputs.aws-region }}
      shell: bash

    - name: Check the Credential
      run: aws sts get-caller-identity
      shell: bash

    - name: Add Security Group
      run: |
        set +e  # Disable automatic exit on error
        TARGET_IP="${{ inputs.target-ip }}"
        if [ -z "$TARGET_IP" ]; then
          
          TARGET_IP="${{ steps.runner-ip.outputs.ip_address }}/32"
        fi
        echo "target ip >> $TARGET_IP"
        
        aws_output=$(aws ec2 revoke-security-group-ingress \
                            --group-id ${{ inputs.security-group-id }} \
                            --region ${{ inputs.aws-region }} \
                            --protocol tcp \
                            --port 22 \
                            --cidr $TARGET_IP 2>&1) # Capture stderr in addition to stdout
        aws_exit_code=$?  # Capture the exit code of the aws command
        if [ $aws_exit_code -ne 0 ]; then  # Check if the aws command failed
          if echo "$aws_output" | grep -q "InvalidPermission.NotFound"; then
            echo "Error: The specified rule does not exist."
            exit 0 # Exit the script with a non-zero exit code
          else
            echo "Error: An unexpected error occurred."
            exit 1 # Exit the script with a non-zero exit code
          fi
        fi
      #if: ${{ failure() && steps.revoke-ingress.outputs.exit-code != 1 }}
      shell: bash